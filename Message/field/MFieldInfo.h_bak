/*
 * @(#) MFieldInfo.h Created on 2014-03-27
 *
 * Copyright (c) 2014-2016 Erisen Xu (@itfriday)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef MFIELD_INFO_H
#define MFIELD_INFO_H

#include "comm/MByteArray.h"
#include <vector>

/**
 * <code>MFieldInfo</code>协议字段信息类。本类的目的，主要功能用在策划表格转xml文件，以及协议配置转协议类中<br>
 * @version 1.0
 * @author 徐勇(Erisen Xu)
 */
class M_DLLIMPORT MFieldInfo
{
protected:
    string m_sName;                         // 字段名字
    string m_sType;                         // 字段类型
    string m_sSubtype;                      // 字段的子类型
    string m_sTag;                          // 字段的标签
    string m_sVersion;                      // 字段引人的版本
    string m_sDefault;                      // 字段的默认值
    string m_sDesc;                         // 字段的描述信息
    string m_sCount;                        // 数组字段的数量
    string m_sValue;                        // 字段的值
    MFieldInfo* m_pParent;                  // 父字段对象
    vector<MFieldInfo*> m_oSubFields;       // 字段的子字段列表
public:
    /**
     * 构造函数
     */
    MFieldInfo(const string& sName = "", const string& sType = "", const string& sSubType = "",
               const string& sTag = "", const string& sVersion = "", const string& sDefault = "",
               const string& sDesc = "", const string& sCount = "");

    /**
     * 拷贝构造函数
     */
    MFieldInfo(const MFieldInfo& oField);
    
    /**
     * 析构函数
     */
    virtual ~MFieldInfo();
    
    /**
     * 设置字段名字
     * @param sName 字段名字
     */
    void setName(const string& sName) {m_sName = sName;}

    /**
     * 取字段名字
     * @return 返回字段名字
     */
    string getName() {return m_sName;}

    /**
     * 取字段名字
     * @return 返回字段名字
     */
    const string& getName() const {return m_sName;}

    /**
     * 设置字段类型
     * @param bType 字段类型
     */
    void setType(const string& sType) {m_sType = sType;}

    /**
     * 取字段类型
     * @return 返回字段类型
     */
    const string& getType() const {return m_sType;}

    /**
     * 取字段类型
     * @return 返回字段类型
     */
    string getType() {return m_sType;}

    /**
     * 设置字段标签
     * @param sTag 字段标签
     */
    void setTag(const string& sTag) {m_sTag = sTag;}
    
    /**
     * 取字段标签
     * @return 返回字段标签
     */
    const string& getTag() const {return m_sTag;}

    /**
     * 取字段标签
     * @return 返回字段标签
     */
    string getTag() {return m_sTag;}

    /**
     * 设置字段引入版本
     * @param sVersion 字段引入版本
     */
    void setVersion(const string& sVersion) {m_sVersion = sVersion;}

    /**
     * 取字段引入版本
     * @return 返回字段引入版本
     */
    string getVersion() {return m_sVersion;}

    /**
     * 取字段引入版本
     * @return 返回字段引入版本
     */
    const string& getVersion() const {return m_sVersion;}

    /**
     * 设置数组字段子字段名
     * @param sSubtype 数组字段子字段名
     */
    void setSubtype(const string& sSubtype) {m_sSubtype = sSubtype;}

    /**
     * 取数组字段子字段名
     * @return 返回数组字段子字段名
     */
    string getSubtype() {return m_sSubtype;}

    /**
     * 取数组字段子字段名
     * @return 返回数组字段子字段名
     */
    const string& getSubtype() const {return m_sSubtype;}

    /**
     * 设置字段默认值
     * @param sDefault 字段默认值
     */
    void setDefault(const string& sDefault) {m_sDefault = sDefault;}

    /**
     * 取字段默认值
     * @return 返回字段默认值
     */
    string getDefault() {return m_sDefault;}

    /**
     * 取字段默认值
     * @return 返回字段默认值
     */
    const string& getDefault() const {return m_sDefault;}

    /**
     * 设置字段描述
     * @param sDesc 字段描述
     */
    void setDesc(const string& sDesc) {m_sDesc = sDesc;}

    /**
     * 取字段描述
     * @return 返回字段描述
     */
    string getDesc() {return m_sDesc;}

    /**
     * 取字段描述
     * @return 返回字段描述
     */
    const string& getDesc() const {return m_sDesc;}

    /**
     * 设置数组字段最大数量
     * @param sCount 数组字段最大数量
     */
    void setCount(const string& sCount) {m_sCount = sCount;}

    /**
     * 取数组字段最大数量
     * @return 返回数组字段最大数量
     */
    string getCount() {return m_sCount;}

    /**
     * 取数组字段最大数量
     * @return 返回数组字段最大数量
     */
    const string& getCount() const {return m_sCount;}

    /**
     * 设置字段值
     * @param sValue 字段值
     */
    void setValue(const string& sValue) {m_sValue = sValue;}

    /**
     * 取字段值
     * @return 返回字段值
     */
    string getValue() {return m_sValue;}

    /**
     * 取字段值
     * @return 返回字段值
     */
    const string& getValue() const {return m_sValue;}

    /**
     * 设置父字段对象
     * @param pParent 父字段对象
     */
    void setParent(MFieldInfo* pParent) {m_pParent = pParent;}

    /**
     * 取父字段对象
     * @return 返回父字段对象
     */
    MFieldInfo* getParent() const {return m_pParent;}

    /**
     * 添加子字段
     * @param pSubField 要添加的子字段
     */
    void addSubField(MFieldInfo* pSubField);

    /**
     * 将字段格式化成XML形式
     * @param baBuf 保存字段信息的缓存区
     * @param sPrefix 格式化字符串的前缀
     * @return 成功返回0，失败返回错误码
     */
    void toXml(MByteArray& baBuf, const string& sPrefix);

    /**
     * 通过字段名查找字段
     * @param sName 字段名
     * @return 返回与字段名对应的字段对象
     */
    MFieldInfo* getSubFieldByName(const string& sName);

    /**
     * 克隆函数
     * @return 返回克隆获取的对象
     */
    MFieldInfo* clone() const;
};

#endif /* defined(MFIELD_H) */
