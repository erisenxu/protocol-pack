/*
 * @(#) MFieldInfo.cpp Created on 2014-03-27
 *
 * Copyright (c) 2014-2054 Erisen Xu(徐勇) All Rights Reserved
 */

#include "MFieldInfo.h"

#include "comm/MBaseFuncDef.h"
#include "comm/MErrorCode.h"

/**
 * 构造函数
 */
MFieldInfo::MFieldInfo(const string& sName, const string& sType, const string& sSubType,
                       const string& sTag, const string& sVersion, const string& sDefault,
                       const string& sDesc, const string& sCount)
    : m_sName(sName),
      m_sType(sType),
      m_sSubtype(sSubType),
      m_sTag(sTag),
      m_sVersion(sVersion),
      m_sDefault(sDefault),
      m_sDesc(sDesc),
      m_sCount(sCount)
{
}

/**
 * 拷贝构造函数
 */
MFieldInfo::MFieldInfo(const MFieldInfo& oField)
    : m_sName(oField.m_sName),
      m_sType(oField.m_sType),
      m_sSubtype(oField.m_sSubtype),
      m_sTag(oField.m_sTag),
      m_sVersion(oField.m_sVersion),
      m_sDefault(oField.m_sDefault),
      m_sDesc(oField.m_sDesc),
      m_sCount(oField.m_sCount),
      m_sValue(oField.m_sValue),
      m_pParent(oField.m_pParent)
{
    for (auto pFieldInfo : oField.m_oSubFields)
    {
        addSubField(pFieldInfo->clone());
    }
}


/**
 * 析构函数
 */
MFieldInfo::~MFieldInfo()
{
    for (auto pFieldInfo : m_oSubFields)
    {
        delete pFieldInfo;
    }
    m_oSubFields.clear();
}

/**
 * 添加子字段
 * @param pSubField 要添加的子字段
 */
void MFieldInfo::addSubField(MFieldInfo* pSubField)
{
    if (NULL == pSubField) return;

    m_oSubFields.push_back(pSubField);
    pSubField->setParent(this);
}

/**
 * 将字段格式化成XML形式
 * @param baBuf 保存字段信息的缓存区
 * @param sPrefix 格式化字符串的前缀
 * @return 成功返回0，失败返回错误码
 */
void MFieldInfo::toXml(MByteArray& baBuf, const string& sPrefix)
{
    baBuf.append(sPrefix).append("<").append(getName()).append(">");

    if (m_oSubFields.size() > 0)
    {
        string sSubPrefix = sPrefix + "    ";
        baBuf.append("\n");
        for (auto pFieldInfo : m_oSubFields) pFieldInfo->toXml(baBuf, sSubPrefix);
        baBuf.append(sPrefix).append("</").append(getName()).append(">\n");
    }
    else
    {
        baBuf.append(m_sValue);
        baBuf.append("</").append(getName()).append(">\n");
    }
}

/**
 * 通过字段名查找字段
 * @param sName 字段名
 * @return 返回与字段名对应的字段对象
 */
MFieldInfo* MFieldInfo::getSubFieldByName(const string& sName)
{
    for (auto pFieldInfo : m_oSubFields)
    {
        if (pFieldInfo->getName() == sName) return pFieldInfo;
    }

    return NULL;
}

/**
 * 克隆函数
 * @return 返回克隆获取的对象
 */
MFieldInfo* MFieldInfo::clone() const
{
    return new MFieldInfo(*this);
}

